function Text() {
    const text = {block1: 
       <div style={{textAlign:"left", paddingLeft: "0%"}}>my-react-app/<br/>
        ├── public/<br/>
        │   ├── index.html<br/>
        │   └── ...<br/>
        ├── src/<br/>
        │   ├── App.js<br/>
        │   ├── index.js<br/>
        │   ├── PouchDB/<br/>
        │   │   └── pouchdb.js<br/>
        │   ├── components/<br/>
        │   │   ├── ConfirmationDialog/<br/>
        │   │   │   └── ConfirmationDialog.jsx<br/>
        │   │   └── ... (другие компоненты)<br/>
        │   ├── pages/<br/>
        │   │   ├── Form/<br/>
        │   │   │   ├── Form.jsx<br/>
        │   │   │   ├── Edit_Mode.jsx<br/>
        │   │   │   ├── cp_Form/<br/>
        │   │   │   │   ├── DisplayModeSection.jsx<br/>
        │   │   │   │   └── ...<br/>
        │   │   │   └── ...<br/>
        │   │   ├── Saved_Form/<br/>
        │   │   │   ├── Saved_Form.jsx<br/>
        │   │   │   └── View_Form/<br/>
        │   │   │       ├── EditSavedForm.jsx<br/>
        │   │   │       └── View_Form.jsx<br/>
        │   │   └── ... (другие страницы)<br/>
        │   ├── styles/<br/>
        │   │   └── ... (глобальные стили)<br/>
        │   └── ... (другие файлы)<br/>
        ├── package.json<br/>
        ├── README.md<br/>
        └── ...</div>
        , 
        block2: <div>
        Основные компоненты и их назначение:

        App.js: 
            Корневой компонент приложения. Он отвечает за маршрутизацию и отображение различных страниц в зависимости от URL.
        index.js: 
            Точка входа в React-приложение. Он подключает корневой компонент App к DOM.
        PouchDB:
            pouchdb.js: Файл, содержащий конфигурацию и инициализацию PouchDB, локальной базы данных, используемой для хранения данных анкет и шаблонов.
        Компоненты (components/):
            ConfirmationDialog/ConfirmationDialog.jsx: Переиспользуемый компонент для отображения модального окна с подтверждением. Используется для подтверждения удаления анкеты или шаблона.
            Header.jsx: Компонент для отображения шапки сайта.
            Footer.jsx: Компонент для отображения подвала сайта.

    Страницы (pages/):

    Form/Form.jsx:
        Назначение: Страница для заполнения анкеты на основе шаблона.
        Функции:
            Загрузка шаблона из PouchDB по templateId.
            Отображение полей формы на основе данных шаблона.
            Сохранение заполненной анкеты в PouchDB.
        Компоненты:
            DisplayModeSection: Отображает поля формы в режиме просмотра.
            Tag: Генерирует тег для анкеты и предлагает сохранить ее.
            Edit_Mode: Отображает поля формы в режиме редактирования (для редактирования шаблона).
            Form_Header: Заголовок формы, содержащий название и кнопку переключения режима редактирования.
        Функции в компоненте:
            handleInputChange: Обновляет состояние formData при изменении значения поля.
            handleComplete: Обработчик завершения заполнения формы. Передает данные в Tag.

    Form/Edit_Mode.jsx:
        Назначение: Компонент для редактирования шаблона формы (добавление, удаление, изменение полей).
        Функции:
            Отображение полей формы в режиме редактирования.
            Предоставление возможности добавлять новые поля.
            Предоставление возможности удалять существующие поля.
            Предоставление возможности изменять метки полей.
        Вспомогательные компоненты:
            AddTextField: Компонент для добавления текстового поля.
            AddSelectField: Компонент для добавления выпадающего списка.

    Form/cp_Form/DisplayModeSection.jsx:
        Назначение: Компонент для отображения полей формы в режиме просмотра (без возможности редактирования).
        Функции:
            Отображение текстовых полей.
            Отображение выпадающих списков.
            Отображение других типов полей.
        Функции:
            handleInputChange: Обрабатывает изменения в значениях полей (вызывается из родительского компонента).

    Saved_Form/Saved_Form.jsx:
        Назначение: Страница для просмотра списка сохраненных анкет.
        Функции:
            Загрузка списка сохраненных анкет из PouchDB.
            Отображение списка анкет.
            Предоставление возможности удалить анкету.
            Предоставление возможности просмотреть анкету.
        Компоненты:
            Нет собственных компонентов, использует только стандартные элементы HTML.

    Saved_Form/View_Form/View_Form.jsx:
        Назначение: Страница для просмотра и редактирования конкретной сохраненной анкеты.
        Функции:
            Загрузка данных анкеты из PouchDB по formId.
            Отображение полей анкеты в режиме просмотра или редактирования.
            Предоставление возможности редактировать анкету.
            Сохранение изменений в PouchDB.
        Компоненты:
            DisplayModeSection: Отображает поля анкеты в режиме просмотра.
            EditSavedForm: Отображает поля анкеты в режиме редактирования.

    Saved_Form/View_Form/EditSavedForm.jsx:
        Назначение: Компонент для редактирования сохраненной анкеты.
        Функции:
            Отображение полей анкеты в режиме редактирования (текстовые поля, выпадающие списки).
            Предоставление возможности изменять ответы в текстовых полях.
            Предоставление возможности изменять выбранные варианты в выпадающих списках.
            Предоставление возможности добавлять и удалять опции в выпадающих списках.
            Предоставление возможности удаления полей
            Предварительный просмотр изменений и подтверждение сохранения.
        Функции:
            handleUpdateField: Обновляет метку поля.
            handleUpdateOptions: Обновляет опции выпадающего списка.
            handleDeleteField: Удаляет поле из формы.
            handleUpdateAnswer: Обновляет ответ пользователя в поле.
            handleSaveChangesClick: Открывает модальное окно предпросмотра и подтверждения сохранения.
            handleConfirmSave: Выполняет сохранение изменений.
            handleCancelSave: Закрывает модальное окно без сохранения.
        Компонент использует локальные состояния (useState) для реализации логики предпросмотра.
        </div>, block3: <div>Логика работы приложения:

    Создание шаблона: Пользователь создает шаблон анкеты, определяя поля и их типы (текст, выпадающий список). Шаблон сохраняется в PouchDB.
    Заполнение анкеты: Пользователь выбирает шаблон и заполняет анкету, вводя данные в поля формы.
    Сохранение анкеты: Заполненная анкета сохраняется в PouchDB, связывается с шаблоном, на основе которого она была создана, и ей присваивается уникальный тег.
    Просмотр сохраненных анкет: Пользователь может просмотреть список сохраненных анкет.
    Просмотр и редактирование анкеты: Пользователь может выбрать анкету из списка и просмотреть ее. Если необходимо, пользователь может отредактировать анкету и сохранить изменения.

Потоки данных

    Шаблон {`->`} Форма: При загрузке страницы Form.jsx, данные шаблона из PouchDB передаются в DisplayModeSection для отображения полей для заполнения.
    Ввод данных {`->`} Форма: Когда пользователь вводит данные, функция handleInputChange обновляет состояние formData в Form.jsx.
    Форма {`->`} Tag: После заполнения формы, данные из formData передаются в компонент Tag.
    Tag {`->`} PouchDB: Tag сохраняет заполненную форму с ответами в PouchDB.
    PouchDB {`->`} Saved_Form: Saved_Form загружает список сохраненных форм из PouchDB.
    Saved_Form {`->`} View_Form: При просмотре сохраненной формы, ID формы передается в View_Form, и данные формы загружаются из PouchDB (или передаются через location.state).
    View_Form {`->`} EditSavedForm: В режиме редактирования, View_Form передает данные формы в EditSavedForm для редактирования.
    EditSavedForm {`->`} PouchDB: После редактирования, EditSavedForm сохраняет изменения в PouchDB.
    </div>, block4: "text4"}
    return text
}

export {Text}